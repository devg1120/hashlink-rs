/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const HL_VERSION: u32 = 68608;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201505;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 23;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const _BITS_WCHAR_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const HL_WSIZE: u32 = 8;
pub const IS_64: u32 = 1;
pub const _PTR_FMT: &'static [u8; 4usize] = b"%lX\0";
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _XLOCALE_H: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const _SIGSET_H_types: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const _STRUCT_TIMEVAL: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_H: u32 = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __have_pthread_attr_t: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const _G_config_h: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _G_HAVE_MMAP: u32 = 1;
pub const _G_HAVE_MREMAP: u32 = 1;
pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
pub const _G_BUFSIZ: u32 = 8192;
pub const _IO_BUFSIZ: u32 = 8192;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
pub const EOF: i32 = -1;
pub const _IOS_INPUT: u32 = 1;
pub const _IOS_OUTPUT: u32 = 2;
pub const _IOS_ATEND: u32 = 4;
pub const _IOS_APPEND: u32 = 8;
pub const _IOS_TRUNC: u32 = 16;
pub const _IOS_NOCREATE: u32 = 32;
pub const _IOS_NOREPLACE: u32 = 64;
pub const _IOS_BIN: u32 = 128;
pub const _IO_MAGIC: u32 = 4222418944;
pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
pub const _IO_MAGIC_MASK: u32 = 4294901760;
pub const _IO_USER_BUF: u32 = 1;
pub const _IO_UNBUFFERED: u32 = 2;
pub const _IO_NO_READS: u32 = 4;
pub const _IO_NO_WRITES: u32 = 8;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
pub const _IO_LINKED: u32 = 128;
pub const _IO_IN_BACKUP: u32 = 256;
pub const _IO_LINE_BUF: u32 = 512;
pub const _IO_TIED_PUT_GET: u32 = 1024;
pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
pub const _IO_IS_APPENDING: u32 = 4096;
pub const _IO_IS_FILEBUF: u32 = 8192;
pub const _IO_BAD_SEEN: u32 = 16384;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IO_FLAGS2_MMAP: u32 = 1;
pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
pub const _IO_SKIPWS: u32 = 1;
pub const _IO_LEFT: u32 = 2;
pub const _IO_RIGHT: u32 = 4;
pub const _IO_INTERNAL: u32 = 8;
pub const _IO_DEC: u32 = 16;
pub const _IO_OCT: u32 = 32;
pub const _IO_HEX: u32 = 64;
pub const _IO_SHOWBASE: u32 = 128;
pub const _IO_SHOWPOINT: u32 = 256;
pub const _IO_UPPERCASE: u32 = 512;
pub const _IO_SHOWPOS: u32 = 1024;
pub const _IO_SCIENTIFIC: u32 = 2048;
pub const _IO_FIXED: u32 = 4096;
pub const _IO_UNITBUF: u32 = 8192;
pub const _IO_STDIO: u32 = 16384;
pub const _IO_DONT_CLOSE: u32 = 32768;
pub const _IO_BOOLALPHA: u32 = 65536;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const L_cuserid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _MEMORY_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _UCHAR_H: u32 = 1;
pub const __mbstate_t_defined: u32 = 1;
pub const hl_invalid_comparison: u32 = 2864434397;
pub const MEM_KIND_DYNAMIC: u32 = 0;
pub const MEM_KIND_RAW: u32 = 1;
pub const MEM_KIND_NOPTR: u32 = 2;
pub const MEM_KIND_FINALIZER: u32 = 3;
pub const MEM_ALIGN_DOUBLE: u32 = 128;
pub const MEM_ZERO: u32 = 256;
pub const TYPE_STR: &'static [u8; 21usize] = b"vcsilfdbBDPOATR??X?N\0";
pub const _VOID: &'static [u8; 2usize] = b"v\0";
pub const _I8: &'static [u8; 2usize] = b"c\0";
pub const _I16: &'static [u8; 2usize] = b"s\0";
pub const _I32: &'static [u8; 2usize] = b"i\0";
pub const _I64: &'static [u8; 2usize] = b"l\0";
pub const _F32: &'static [u8; 2usize] = b"f\0";
pub const _F64: &'static [u8; 2usize] = b"d\0";
pub const _BOOL: &'static [u8; 2usize] = b"b\0";
pub const _BYTES: &'static [u8; 2usize] = b"B\0";
pub const _DYN: &'static [u8; 2usize] = b"D\0";
pub const _ARR: &'static [u8; 2usize] = b"A\0";
pub const _TYPE: &'static [u8; 2usize] = b"T\0";
pub const _SETJMP_H: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const HL_EXC_MAX_STACK: u32 = 256;
pub const HL_EXC_RETHROW: u32 = 1;
pub const HL_EXC_CATCH_ALL: u32 = 2;
pub const HL_EXC_IS_THROW: u32 = 4;
pub const HL_THREAD_INVISIBLE: u32 = 16;
pub const HL_THREAD_PROFILER_PAUSED: u32 = 32;
pub const HL_TREAD_TRACK_SHIFT: u32 = 16;
pub const HL_TRACK_ALLOC: u32 = 1;
pub const HL_TRACK_CAST: u32 = 2;
pub const HL_TRACK_DYNFIELD: u32 = 4;
pub const HL_TRACK_DYNCALL: u32 = 8;
pub const HL_TRACK_MASK: u32 = 15;
pub const HL_MAX_EXTRA_STACK: u32 = 64;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const _MATH_H_MATHDEF: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const M_El: f64 = 2.718281828459045;
pub const M_LOG2El: f64 = 1.4426950408889634;
pub const M_LOG10El: f64 = 0.4342944819032518;
pub const M_LN2l: f64 = 0.6931471805599453;
pub const M_LN10l: f64 = 2.302585092994046;
pub const M_PIl: f64 = 3.141592653589793;
pub const M_PI_2l: f64 = 1.5707963267948966;
pub const M_PI_4l: f64 = 0.7853981633974483;
pub const M_1_PIl: f64 = 0.3183098861837907;
pub const M_2_PIl: f64 = 0.6366197723675814;
pub const M_2_SQRTPIl: f64 = 1.1283791670955126;
pub const M_SQRT2l: f64 = 1.4142135623730951;
pub const M_SQRT1_2l: f64 = 0.7071067811865476;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type bool_ = ::std::os::raw::c_uchar;
pub type int_val = isize;
pub type int64 = ::std::os::raw::c_longlong;
pub type uint64 = ::std::os::raw::c_ulonglong;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = u32;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub __wait_terminated: wait__bindgen_ty_1,
    pub __wait_stopped: wait__bindgen_ty_2,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_1))
    );
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn __w_termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set___w_termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___w_coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __w_termsig: ::std::os::raw::c_uint,
        __w_coredump: ::std::os::raw::c_uint,
        __w_retcode: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let __w_termsig: u32 = unsafe { ::std::mem::transmute(__w_termsig) };
            __w_termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __w_coredump: u32 = unsafe { ::std::mem::transmute(__w_coredump) };
            __w_coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let __w_retcode: u32 = unsafe { ::std::mem::transmute(__w_retcode) };
            __w_retcode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_2))
    );
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn __w_stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __w_stopval: ::std::os::raw::c_uint,
        __w_stopsig: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let __w_stopval: u32 = unsafe { ::std::mem::transmute(__w_stopval) };
            __w_stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let __w_stopsig: u32 = unsafe { ::std::mem::transmute(__w_stopsig) };
            __w_stopsig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_wait() {
    assert_eq!(
        ::std::mem::size_of::<wait>(),
        4usize,
        concat!("Size of: ", stringify!(wait))
    );
    assert_eq!(
        ::std::mem::align_of::<wait>(),
        4usize,
        concat!("Alignment of ", stringify!(wait))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(w_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).__wait_terminated as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(__wait_terminated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).__wait_stopped as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(__wait_stopped)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __WAIT_STATUS {
    pub __uptr: *mut wait,
    pub __iptr: *mut ::std::os::raw::c_int,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout___WAIT_STATUS() {
    assert_eq!(
        ::std::mem::size_of::<__WAIT_STATUS>(),
        8usize,
        concat!("Size of: ", stringify!(__WAIT_STATUS))
    );
    assert_eq!(
        ::std::mem::align_of::<__WAIT_STATUS>(),
        8usize,
        concat!("Alignment of ", stringify!(__WAIT_STATUS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__WAIT_STATUS>())).__uptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__WAIT_STATUS),
            "::",
            stringify!(__uptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__WAIT_STATUS>())).__iptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__WAIT_STATUS),
            "::",
            stringify!(__iptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strtol_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: __locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: __locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoll_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: __locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __loc: __locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtod_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: __locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: __locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtold_l(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __loc: __locale_t,
    ) -> u128;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type useconds_t = __useconds_t;
pub type suseconds_t = __suseconds_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: pthread_mutex_t___pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutex_t___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t___pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t___pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t___pthread_mutex_s>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pthread_mutex_t___pthread_mutex_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__lock as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__count as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__owner as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__nusers as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__kind as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__spins as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__elision as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__list as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: pthread_cond_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__lock as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__futex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__total_seq as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__total_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__wakeup_seq as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__wakeup_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__woken_seq as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__woken_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__mutex as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__mutex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__nwaiters as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__nwaiters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__broadcast_seq as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__broadcast_seq)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: pthread_rwlock_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlock_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__lock as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_readers as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__readers_wakeup as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__readers_wakeup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__writer_wakeup as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__writer_wakeup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_readers_queued
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_readers_queued)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_writers_queued
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_writers_queued)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__rwelision as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__pad1 as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__pad2 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__flags as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__flags)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn secure_getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkostemp(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemp64(
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkostemps64(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canonicalize_file_name(
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type comparison_fn_t = __compar_fn_t;
pub type __compar_d_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_d_fn_t,
        __arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(__key: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn posix_openpt(__oflag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpt() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
pub const __codecvt_result___codecvt_ok: __codecvt_result = 0;
pub const __codecvt_result___codecvt_partial: __codecvt_result = 1;
pub const __codecvt_result___codecvt_error: __codecvt_result = 2;
pub const __codecvt_result___codecvt_noconv: __codecvt_result = 3;
pub type __codecvt_result = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: size_t,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
pub type cookie_read_function_t = __io_read_fn;
pub type cookie_write_function_t = __io_write_fn;
pub type cookie_seek_function_t = __io_seek_fn;
pub type cookie_close_function_t = __io_close_fn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: __io_read_fn,
    pub write: __io_write_fn,
    pub seek: __io_seek_fn,
    pub close: __io_close_fn,
}
#[test]
fn bindgen_test_layout__IO_cookie_io_functions_t() {
    assert_eq!(
        ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
        32usize,
        concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).read as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).write as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).seek as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).close as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(close)
        )
    );
}
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_file {
    _unused: [u8; 0],
}
extern "C" {
    pub fn _IO_cookie_init(
        __cfile: *mut _IO_cookie_file,
        __read_write: ::std::os::raw::c_int,
        __cookie: *mut ::std::os::raw::c_void,
        __fns: _IO_cookie_io_functions_t,
    );
}
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int, arg3: __ssize_t)
        -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(
        arg1: *mut _IO_FILE,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _IO_seekoff(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type fpos_t = _G_fpos_t;
pub type fpos64_t = _G_fpos64_t;
extern "C" {
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpfile64() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: _IO_cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgets_unlocked(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __s: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fputs_unlocked(
        __s: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseeko64(
        __stream: *mut FILE,
        __off: __off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello64(__stream: *mut FILE) -> __off64_t;
}
extern "C" {
    pub fn fgetpos64(__stream: *mut FILE, __pos: *mut fpos64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos64(__stream: *mut FILE, __pos: *const fpos64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut _sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut _sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cuserid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obstack {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obstack_printf(
        __obstack: *mut obstack,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn obstack_vprintf(
        __obstack: *mut obstack,
        __format: *const ::std::os::raw::c_char,
        __args: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rawmemchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memrchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: __locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
        __l: __locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchrnul(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcasestr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memmem(
        __haystack: *const ::std::os::raw::c_void,
        __haystacklen: size_t,
        __needle: *const ::std::os::raw::c_void,
        __needlelen: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t) -> size_t;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: __locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: size_t,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: __locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
        __loc: __locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strverscmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfry(__string: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memfrob(__s: *mut ::std::os::raw::c_void, __n: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn basename(__filename: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
pub type mbstate_t = __mbstate_t;
pub type char16_t = ::std::os::raw::c_ushort;
pub type char32_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn mbrtoc16(
        __pc16: *mut char16_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
        __p: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn c16rtomb(
        __s: *mut ::std::os::raw::c_char,
        __c16: char16_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbrtoc32(
        __pc32: *mut char32_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
        __p: *mut mbstate_t,
    ) -> size_t;
}
extern "C" {
    pub fn c32rtomb(
        __s: *mut ::std::os::raw::c_char,
        __c32: char32_t,
        __ps: *mut mbstate_t,
    ) -> size_t;
}
pub type uchar = char16_t;
extern "C" {
    pub fn ustrlen(str: *const uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ustrdup(str: *const uchar) -> *mut uchar;
}
extern "C" {
    pub fn utod(str: *const uchar, end: *mut *mut uchar) -> f64;
}
extern "C" {
    pub fn utoi(str: *const uchar, end: *mut *mut uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ucmp(a: *const uchar, b: *const uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utostr(
        out: *mut ::std::os::raw::c_char,
        out_size: ::std::os::raw::c_int,
        str: *const uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usprintf(
        out: *mut uchar,
        out_size: ::std::os::raw::c_int,
        fmt: *const uchar,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uvszprintf(
        out: *mut uchar,
        out_size: ::std::os::raw::c_int,
        fmt: *const uchar,
        arglist: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uprintf(fmt: *const uchar, str: *const uchar);
}
pub const hl_type_kind_HVOID: hl_type_kind = 0;
pub const hl_type_kind_HUI8: hl_type_kind = 1;
pub const hl_type_kind_HUI16: hl_type_kind = 2;
pub const hl_type_kind_HI32: hl_type_kind = 3;
pub const hl_type_kind_HI64: hl_type_kind = 4;
pub const hl_type_kind_HF32: hl_type_kind = 5;
pub const hl_type_kind_HF64: hl_type_kind = 6;
pub const hl_type_kind_HBOOL: hl_type_kind = 7;
pub const hl_type_kind_HBYTES: hl_type_kind = 8;
pub const hl_type_kind_HDYN: hl_type_kind = 9;
pub const hl_type_kind_HFUN: hl_type_kind = 10;
pub const hl_type_kind_HOBJ: hl_type_kind = 11;
pub const hl_type_kind_HARRAY: hl_type_kind = 12;
pub const hl_type_kind_HTYPE: hl_type_kind = 13;
pub const hl_type_kind_HREF: hl_type_kind = 14;
pub const hl_type_kind_HVIRTUAL: hl_type_kind = 15;
pub const hl_type_kind_HDYNOBJ: hl_type_kind = 16;
pub const hl_type_kind_HABSTRACT: hl_type_kind = 17;
pub const hl_type_kind_HENUM: hl_type_kind = 18;
pub const hl_type_kind_HNULL: hl_type_kind = 19;
pub const hl_type_kind_HMETHOD: hl_type_kind = 20;
pub const hl_type_kind_HSTRUCT: hl_type_kind = 21;
pub const hl_type_kind_HLAST: hl_type_kind = 22;
pub const hl_type_kind__H_FORCE_INT: hl_type_kind = 2147483647;
pub type hl_type_kind = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_alloc_block {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_alloc {
    pub cur: *mut hl_alloc_block,
}
#[test]
fn bindgen_test_layout_hl_alloc() {
    assert_eq!(
        ::std::mem::size_of::<hl_alloc>(),
        8usize,
        concat!("Size of: ", stringify!(hl_alloc))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_alloc>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_alloc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_alloc>())).cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_alloc),
            "::",
            stringify!(cur)
        )
    );
}
pub type hl_field_lookup = _hl_field_lookup;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_module_context {
    pub alloc: hl_alloc,
    pub functions_ptrs: *mut *mut ::std::os::raw::c_void,
    pub functions_types: *mut *mut hl_type,
}
#[test]
fn bindgen_test_layout_hl_module_context() {
    assert_eq!(
        ::std::mem::size_of::<hl_module_context>(),
        24usize,
        concat!("Size of: ", stringify!(hl_module_context))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_module_context>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_module_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module_context>())).alloc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module_context),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hl_module_context>())).functions_ptrs as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module_context),
            "::",
            stringify!(functions_ptrs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hl_module_context>())).functions_types as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module_context),
            "::",
            stringify!(functions_types)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_type_fun {
    pub args: *mut *mut hl_type,
    pub ret: *mut hl_type,
    pub nargs: ::std::os::raw::c_int,
    pub parent: *mut hl_type,
    pub closure_type: hl_type_fun__bindgen_ty_1,
    pub closure: hl_type_fun__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_type_fun__bindgen_ty_1 {
    pub kind: hl_type_kind,
    pub p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_hl_type_fun__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<hl_type_fun__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(hl_type_fun__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_type_fun__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_type_fun__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun__bindgen_ty_1>())).kind as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun__bindgen_ty_1),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun__bindgen_ty_1>())).p as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun__bindgen_ty_1),
            "::",
            stringify!(p)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_type_fun__bindgen_ty_2 {
    pub args: *mut *mut hl_type,
    pub ret: *mut hl_type,
    pub nargs: ::std::os::raw::c_int,
    pub parent: *mut hl_type,
}
#[test]
fn bindgen_test_layout_hl_type_fun__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<hl_type_fun__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(hl_type_fun__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_type_fun__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_type_fun__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun__bindgen_ty_2>())).args as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun__bindgen_ty_2),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun__bindgen_ty_2>())).ret as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun__bindgen_ty_2),
            "::",
            stringify!(ret)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun__bindgen_ty_2>())).nargs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun__bindgen_ty_2),
            "::",
            stringify!(nargs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hl_type_fun__bindgen_ty_2>())).parent as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun__bindgen_ty_2),
            "::",
            stringify!(parent)
        )
    );
}
#[test]
fn bindgen_test_layout_hl_type_fun() {
    assert_eq!(
        ::std::mem::size_of::<hl_type_fun>(),
        80usize,
        concat!("Size of: ", stringify!(hl_type_fun))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_type_fun>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_type_fun))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun>())).args as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun>())).ret as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun),
            "::",
            stringify!(ret)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun>())).nargs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun),
            "::",
            stringify!(nargs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun>())).parent as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun>())).closure_type as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun),
            "::",
            stringify!(closure_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_fun>())).closure as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_fun),
            "::",
            stringify!(closure)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_obj_field {
    pub name: *const uchar,
    pub t: *mut hl_type,
    pub hashed_name: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hl_obj_field() {
    assert_eq!(
        ::std::mem::size_of::<hl_obj_field>(),
        24usize,
        concat!("Size of: ", stringify!(hl_obj_field))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_obj_field>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_obj_field))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_obj_field>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_obj_field),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_obj_field>())).t as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_obj_field),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_obj_field>())).hashed_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_obj_field),
            "::",
            stringify!(hashed_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_obj_proto {
    pub name: *const uchar,
    pub findex: ::std::os::raw::c_int,
    pub pindex: ::std::os::raw::c_int,
    pub hashed_name: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hl_obj_proto() {
    assert_eq!(
        ::std::mem::size_of::<hl_obj_proto>(),
        24usize,
        concat!("Size of: ", stringify!(hl_obj_proto))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_obj_proto>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_obj_proto))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_obj_proto>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_obj_proto),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_obj_proto>())).findex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_obj_proto),
            "::",
            stringify!(findex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_obj_proto>())).pindex as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_obj_proto),
            "::",
            stringify!(pindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_obj_proto>())).hashed_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_obj_proto),
            "::",
            stringify!(hashed_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_type_obj {
    pub nfields: ::std::os::raw::c_int,
    pub nproto: ::std::os::raw::c_int,
    pub nbindings: ::std::os::raw::c_int,
    pub name: *const uchar,
    pub super_: *mut hl_type,
    pub fields: *mut hl_obj_field,
    pub proto: *mut hl_obj_proto,
    pub bindings: *mut ::std::os::raw::c_int,
    pub global_value: *mut *mut ::std::os::raw::c_void,
    pub m: *mut hl_module_context,
    pub rt: *mut hl_runtime_obj,
}
#[test]
fn bindgen_test_layout_hl_type_obj() {
    assert_eq!(
        ::std::mem::size_of::<hl_type_obj>(),
        80usize,
        concat!("Size of: ", stringify!(hl_type_obj))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_type_obj>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_type_obj))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).nfields as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(nfields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).nproto as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(nproto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).nbindings as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(nbindings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).super_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(super_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).fields as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).proto as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).bindings as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(bindings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).global_value as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(global_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).m as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_obj>())).rt as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_obj),
            "::",
            stringify!(rt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_type_virtual {
    pub fields: *mut hl_obj_field,
    pub nfields: ::std::os::raw::c_int,
    pub dataSize: ::std::os::raw::c_int,
    pub indexes: *mut ::std::os::raw::c_int,
    pub lookup: *mut hl_field_lookup,
}
#[test]
fn bindgen_test_layout_hl_type_virtual() {
    assert_eq!(
        ::std::mem::size_of::<hl_type_virtual>(),
        32usize,
        concat!("Size of: ", stringify!(hl_type_virtual))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_type_virtual>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_type_virtual))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_virtual>())).fields as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_virtual),
            "::",
            stringify!(fields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_virtual>())).nfields as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_virtual),
            "::",
            stringify!(nfields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_virtual>())).dataSize as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_virtual),
            "::",
            stringify!(dataSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_virtual>())).indexes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_virtual),
            "::",
            stringify!(indexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_virtual>())).lookup as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_virtual),
            "::",
            stringify!(lookup)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_enum_construct {
    pub name: *const uchar,
    pub nparams: ::std::os::raw::c_int,
    pub params: *mut *mut hl_type,
    pub size: ::std::os::raw::c_int,
    pub hasptr: bool_,
    pub offsets: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hl_enum_construct() {
    assert_eq!(
        ::std::mem::size_of::<hl_enum_construct>(),
        40usize,
        concat!("Size of: ", stringify!(hl_enum_construct))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_enum_construct>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_enum_construct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_enum_construct>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_enum_construct),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_enum_construct>())).nparams as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_enum_construct),
            "::",
            stringify!(nparams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_enum_construct>())).params as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_enum_construct),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_enum_construct>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_enum_construct),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_enum_construct>())).hasptr as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_enum_construct),
            "::",
            stringify!(hasptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_enum_construct>())).offsets as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_enum_construct),
            "::",
            stringify!(offsets)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_type_enum {
    pub name: *const uchar,
    pub nconstructs: ::std::os::raw::c_int,
    pub constructs: *mut hl_enum_construct,
    pub global_value: *mut *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_hl_type_enum() {
    assert_eq!(
        ::std::mem::size_of::<hl_type_enum>(),
        32usize,
        concat!("Size of: ", stringify!(hl_type_enum))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_type_enum>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_type_enum))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_enum>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_enum),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_enum>())).nconstructs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_enum),
            "::",
            stringify!(nconstructs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_enum>())).constructs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_enum),
            "::",
            stringify!(constructs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type_enum>())).global_value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type_enum),
            "::",
            stringify!(global_value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hl_type {
    pub kind: hl_type_kind,
    pub __bindgen_anon_1: hl_type__bindgen_ty_1,
    pub vobj_proto: *mut *mut ::std::os::raw::c_void,
    pub mark_bits: *mut ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hl_type__bindgen_ty_1 {
    pub abs_name: *const uchar,
    pub fun: *mut hl_type_fun,
    pub obj: *mut hl_type_obj,
    pub tenum: *mut hl_type_enum,
    pub virt: *mut hl_type_virtual,
    pub tparam: *mut hl_type,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_hl_type__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<hl_type__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(hl_type__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_type__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_type__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type__bindgen_ty_1>())).abs_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type__bindgen_ty_1),
            "::",
            stringify!(abs_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type__bindgen_ty_1>())).fun as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type__bindgen_ty_1),
            "::",
            stringify!(fun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type__bindgen_ty_1>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type__bindgen_ty_1),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type__bindgen_ty_1>())).tenum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type__bindgen_ty_1),
            "::",
            stringify!(tenum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type__bindgen_ty_1>())).virt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type__bindgen_ty_1),
            "::",
            stringify!(virt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type__bindgen_ty_1>())).tparam as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type__bindgen_ty_1),
            "::",
            stringify!(tparam)
        )
    );
}
#[test]
fn bindgen_test_layout_hl_type() {
    assert_eq!(
        ::std::mem::size_of::<hl_type>(),
        32usize,
        concat!("Size of: ", stringify!(hl_type))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_type>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type>())).kind as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type>())).vobj_proto as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type),
            "::",
            stringify!(vobj_proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_type>())).mark_bits as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_type),
            "::",
            stringify!(mark_bits)
        )
    );
}
extern "C" {
    pub fn hl_type_size(t: *mut hl_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_pad_struct(size: ::std::os::raw::c_int, t: *mut hl_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_get_obj_rt(ot: *mut hl_type) -> *mut hl_runtime_obj;
}
extern "C" {
    pub fn hl_get_obj_proto(ot: *mut hl_type) -> *mut hl_runtime_obj;
}
extern "C" {
    pub fn hl_flush_proto(ot: *mut hl_type);
}
extern "C" {
    pub fn hl_init_enum(et: *mut hl_type, m: *mut hl_module_context);
}
pub type vbyte = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct vdynamic {
    pub t: *mut hl_type,
    pub v: vdynamic__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vdynamic__bindgen_ty_1 {
    pub b: bool_,
    pub ui8: ::std::os::raw::c_uchar,
    pub ui16: ::std::os::raw::c_ushort,
    pub i: ::std::os::raw::c_int,
    pub f: f32,
    pub d: f64,
    pub bytes: *mut vbyte,
    pub ptr: *mut ::std::os::raw::c_void,
    pub i64: int64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_vdynamic__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<vdynamic__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(vdynamic__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<vdynamic__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(vdynamic__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic__bindgen_ty_1>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic__bindgen_ty_1),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic__bindgen_ty_1>())).ui8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic__bindgen_ty_1),
            "::",
            stringify!(ui8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic__bindgen_ty_1>())).ui16 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic__bindgen_ty_1),
            "::",
            stringify!(ui16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic__bindgen_ty_1>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic__bindgen_ty_1),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic__bindgen_ty_1>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic__bindgen_ty_1),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic__bindgen_ty_1>())).d as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic__bindgen_ty_1),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic__bindgen_ty_1>())).bytes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic__bindgen_ty_1),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic__bindgen_ty_1>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic__bindgen_ty_1),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic__bindgen_ty_1>())).i64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic__bindgen_ty_1),
            "::",
            stringify!(i64)
        )
    );
}
#[test]
fn bindgen_test_layout_vdynamic() {
    assert_eq!(
        ::std::mem::size_of::<vdynamic>(),
        16usize,
        concat!("Size of: ", stringify!(vdynamic))
    );
    assert_eq!(
        ::std::mem::align_of::<vdynamic>(),
        8usize,
        concat!("Alignment of ", stringify!(vdynamic))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynamic>())).v as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynamic),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vobj {
    pub t: *mut hl_type,
}
#[test]
fn bindgen_test_layout_vobj() {
    assert_eq!(
        ::std::mem::size_of::<vobj>(),
        8usize,
        concat!("Size of: ", stringify!(vobj))
    );
    assert_eq!(
        ::std::mem::align_of::<vobj>(),
        8usize,
        concat!("Alignment of ", stringify!(vobj))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vobj>())).t as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(vobj), "::", stringify!(t))
    );
}
pub type vvirtual = _vvirtual;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vvirtual {
    pub t: *mut hl_type,
    pub value: *mut vdynamic,
    pub next: *mut vvirtual,
}
#[test]
fn bindgen_test_layout__vvirtual() {
    assert_eq!(
        ::std::mem::size_of::<_vvirtual>(),
        24usize,
        concat!("Size of: ", stringify!(_vvirtual))
    );
    assert_eq!(
        ::std::mem::align_of::<_vvirtual>(),
        8usize,
        concat!("Alignment of ", stringify!(_vvirtual))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_vvirtual>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_vvirtual),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_vvirtual>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_vvirtual),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_vvirtual>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_vvirtual),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct varray {
    pub t: *mut hl_type,
    pub at: *mut hl_type,
    pub size: ::std::os::raw::c_int,
    pub __pad: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_varray() {
    assert_eq!(
        ::std::mem::size_of::<varray>(),
        24usize,
        concat!("Size of: ", stringify!(varray))
    );
    assert_eq!(
        ::std::mem::align_of::<varray>(),
        8usize,
        concat!("Alignment of ", stringify!(varray))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varray>())).t as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(varray), "::", stringify!(t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varray>())).at as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(varray),
            "::",
            stringify!(at)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varray>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(varray),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<varray>())).__pad as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(varray),
            "::",
            stringify!(__pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _vclosure {
    pub t: *mut hl_type,
    pub fun: *mut ::std::os::raw::c_void,
    pub hasValue: ::std::os::raw::c_int,
    pub stackCount: ::std::os::raw::c_int,
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__vclosure() {
    assert_eq!(
        ::std::mem::size_of::<_vclosure>(),
        32usize,
        concat!("Size of: ", stringify!(_vclosure))
    );
    assert_eq!(
        ::std::mem::align_of::<_vclosure>(),
        8usize,
        concat!("Alignment of ", stringify!(_vclosure))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_vclosure>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_vclosure),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_vclosure>())).fun as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_vclosure),
            "::",
            stringify!(fun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_vclosure>())).hasValue as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_vclosure),
            "::",
            stringify!(hasValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_vclosure>())).stackCount as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_vclosure),
            "::",
            stringify!(stackCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_vclosure>())).value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_vclosure),
            "::",
            stringify!(value)
        )
    );
}
pub type vclosure = _vclosure;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vclosure_wrapper {
    pub cl: vclosure,
    pub wrappedFun: *mut vclosure,
}
#[test]
fn bindgen_test_layout_vclosure_wrapper() {
    assert_eq!(
        ::std::mem::size_of::<vclosure_wrapper>(),
        40usize,
        concat!("Size of: ", stringify!(vclosure_wrapper))
    );
    assert_eq!(
        ::std::mem::align_of::<vclosure_wrapper>(),
        8usize,
        concat!("Alignment of ", stringify!(vclosure_wrapper))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vclosure_wrapper>())).cl as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vclosure_wrapper),
            "::",
            stringify!(cl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vclosure_wrapper>())).wrappedFun as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vclosure_wrapper),
            "::",
            stringify!(wrappedFun)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _hl_field_lookup {
    pub t: *mut hl_type,
    pub hashed_name: ::std::os::raw::c_int,
    pub field_index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__hl_field_lookup() {
    assert_eq!(
        ::std::mem::size_of::<_hl_field_lookup>(),
        16usize,
        concat!("Size of: ", stringify!(_hl_field_lookup))
    );
    assert_eq!(
        ::std::mem::align_of::<_hl_field_lookup>(),
        8usize,
        concat!("Alignment of ", stringify!(_hl_field_lookup))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hl_field_lookup>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_hl_field_lookup),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hl_field_lookup>())).hashed_name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_hl_field_lookup),
            "::",
            stringify!(hashed_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hl_field_lookup>())).field_index as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_hl_field_lookup),
            "::",
            stringify!(field_index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_runtime_binding {
    pub ptr: *mut ::std::os::raw::c_void,
    pub closure: *mut hl_type,
    pub fid: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hl_runtime_binding() {
    assert_eq!(
        ::std::mem::size_of::<hl_runtime_binding>(),
        24usize,
        concat!("Size of: ", stringify!(hl_runtime_binding))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_runtime_binding>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_runtime_binding))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_binding>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_binding),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_binding>())).closure as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_binding),
            "::",
            stringify!(closure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_binding>())).fid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_binding),
            "::",
            stringify!(fid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_runtime_obj {
    pub t: *mut hl_type,
    pub nfields: ::std::os::raw::c_int,
    pub nproto: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub nmethods: ::std::os::raw::c_int,
    pub nbindings: ::std::os::raw::c_int,
    pub hasPtr: bool_,
    pub methods: *mut *mut ::std::os::raw::c_void,
    pub fields_indexes: *mut ::std::os::raw::c_int,
    pub bindings: *mut hl_runtime_binding,
    pub parent: *mut hl_runtime_obj,
    pub toStringFun:
        ::std::option::Option<unsafe extern "C" fn(obj: *mut vdynamic) -> *const uchar>,
    pub compareFun: ::std::option::Option<
        unsafe extern "C" fn(a: *mut vdynamic, b: *mut vdynamic) -> ::std::os::raw::c_int,
    >,
    pub castFun: ::std::option::Option<
        unsafe extern "C" fn(obj: *mut vdynamic, t: *mut hl_type) -> *mut vdynamic,
    >,
    pub getFieldFun: ::std::option::Option<
        unsafe extern "C" fn(obj: *mut vdynamic, hfield: ::std::os::raw::c_int) -> *mut vdynamic,
    >,
    pub nlookup: ::std::os::raw::c_int,
    pub ninterfaces: ::std::os::raw::c_int,
    pub lookup: *mut hl_field_lookup,
    pub interfaces: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hl_runtime_obj() {
    assert_eq!(
        ::std::mem::size_of::<hl_runtime_obj>(),
        120usize,
        concat!("Size of: ", stringify!(hl_runtime_obj))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_runtime_obj>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_runtime_obj))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).nfields as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(nfields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).nproto as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(nproto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).nmethods as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(nmethods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).nbindings as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(nbindings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).hasPtr as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(hasPtr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).methods as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(methods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).fields_indexes as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(fields_indexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).bindings as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(bindings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).parent as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).toStringFun as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(toStringFun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).compareFun as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(compareFun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).castFun as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(castFun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).getFieldFun as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(getFieldFun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).nlookup as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(nlookup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).ninterfaces as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(ninterfaces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).lookup as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(lookup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_runtime_obj>())).interfaces as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_runtime_obj),
            "::",
            stringify!(interfaces)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vdynobj {
    pub t: *mut hl_type,
    pub lookup: *mut hl_field_lookup,
    pub raw_data: *mut ::std::os::raw::c_char,
    pub values: *mut *mut ::std::os::raw::c_void,
    pub nfields: ::std::os::raw::c_int,
    pub raw_size: ::std::os::raw::c_int,
    pub nvalues: ::std::os::raw::c_int,
    pub virtuals: *mut vvirtual,
}
#[test]
fn bindgen_test_layout_vdynobj() {
    assert_eq!(
        ::std::mem::size_of::<vdynobj>(),
        56usize,
        concat!("Size of: ", stringify!(vdynobj))
    );
    assert_eq!(
        ::std::mem::align_of::<vdynobj>(),
        8usize,
        concat!("Alignment of ", stringify!(vdynobj))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynobj>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynobj),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynobj>())).lookup as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynobj),
            "::",
            stringify!(lookup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynobj>())).raw_data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynobj),
            "::",
            stringify!(raw_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynobj>())).values as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynobj),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynobj>())).nfields as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynobj),
            "::",
            stringify!(nfields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynobj>())).raw_size as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynobj),
            "::",
            stringify!(raw_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynobj>())).nvalues as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynobj),
            "::",
            stringify!(nvalues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vdynobj>())).virtuals as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(vdynobj),
            "::",
            stringify!(virtuals)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _venum {
    pub t: *mut hl_type,
    pub index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__venum() {
    assert_eq!(
        ::std::mem::size_of::<_venum>(),
        16usize,
        concat!("Size of: ", stringify!(_venum))
    );
    assert_eq!(
        ::std::mem::align_of::<_venum>(),
        8usize,
        concat!("Alignment of ", stringify!(_venum))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_venum>())).t as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_venum), "::", stringify!(t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_venum>())).index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_venum),
            "::",
            stringify!(index)
        )
    );
}
pub type venum = _venum;
extern "C" {
    pub static mut hlt_void: hl_type;
}
extern "C" {
    pub static mut hlt_i32: hl_type;
}
extern "C" {
    pub static mut hlt_i64: hl_type;
}
extern "C" {
    pub static mut hlt_f64: hl_type;
}
extern "C" {
    pub static mut hlt_f32: hl_type;
}
extern "C" {
    pub static mut hlt_dyn: hl_type;
}
extern "C" {
    pub static mut hlt_array: hl_type;
}
extern "C" {
    pub static mut hlt_bytes: hl_type;
}
extern "C" {
    pub static mut hlt_dynobj: hl_type;
}
extern "C" {
    pub static mut hlt_bool: hl_type;
}
extern "C" {
    pub static mut hlt_abstract: hl_type;
}
extern "C" {
    pub fn hl_nan() -> f64;
}
extern "C" {
    pub fn hl_is_dynamic(t: *mut hl_type) -> bool_;
}
extern "C" {
    pub fn hl_same_type(a: *mut hl_type, b: *mut hl_type) -> bool_;
}
extern "C" {
    pub fn hl_safe_cast(t: *mut hl_type, to: *mut hl_type) -> bool_;
}
extern "C" {
    pub fn hl_alloc_array(t: *mut hl_type, size: ::std::os::raw::c_int) -> *mut varray;
}
extern "C" {
    pub fn hl_alloc_dynamic(t: *mut hl_type) -> *mut vdynamic;
}
extern "C" {
    pub fn hl_alloc_dynbool(b: bool_) -> *mut vdynamic;
}
extern "C" {
    pub fn hl_alloc_obj(t: *mut hl_type) -> *mut vdynamic;
}
extern "C" {
    pub fn hl_alloc_enum(t: *mut hl_type, index: ::std::os::raw::c_int) -> *mut venum;
}
extern "C" {
    pub fn hl_alloc_virtual(t: *mut hl_type) -> *mut vvirtual;
}
extern "C" {
    pub fn hl_alloc_dynobj() -> *mut vdynobj;
}
extern "C" {
    pub fn hl_alloc_bytes(size: ::std::os::raw::c_int) -> *mut vbyte;
}
extern "C" {
    pub fn hl_copy_bytes(byte: *const vbyte, size: ::std::os::raw::c_int) -> *mut vbyte;
}
extern "C" {
    pub fn hl_utf8_length(s: *const vbyte, pos: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_from_utf8(
        out: *mut uchar,
        outLen: ::std::os::raw::c_int,
        str: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_to_utf8(bytes: *const uchar) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn hl_to_utf16(str: *const ::std::os::raw::c_char) -> *mut uchar;
}
extern "C" {
    pub fn hl_virtual_make_value(v: *mut vvirtual) -> *mut vdynamic;
}
extern "C" {
    pub fn hl_obj_field_fetch(t: *mut hl_type, fid: ::std::os::raw::c_int) -> *mut hl_obj_field;
}
extern "C" {
    pub fn hl_hash(name: *mut vbyte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_hash_utf8(str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_hash_gen(name: *const uchar, cache_name: bool_) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_field_name(hash: ::std::os::raw::c_int) -> *mut vbyte;
}
extern "C" {
    pub fn hl_alloc_strbytes(msg: *const uchar, ...) -> *mut vdynamic;
}
extern "C" {
    pub fn hl_assert();
}
extern "C" {
    pub fn hl_throw(v: *mut vdynamic);
}
extern "C" {
    pub fn hl_rethrow(v: *mut vdynamic);
}
extern "C" {
    pub fn hl_null_access();
}
extern "C" {
    pub fn hl_setup_longjump(j: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn hl_setup_exception(
        resolve_symbol: *mut ::std::os::raw::c_void,
        capture_stack: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn hl_dump_stack();
}
extern "C" {
    pub fn hl_exception_stack() -> *mut varray;
}
extern "C" {
    pub fn hl_detect_debugger() -> bool_;
}
extern "C" {
    pub fn hl_to_virtual(vt: *mut hl_type, obj: *mut vdynamic) -> *mut vvirtual;
}
extern "C" {
    pub fn hl_init_virtual(vt: *mut hl_type, ctx: *mut hl_module_context);
}
extern "C" {
    pub fn hl_lookup_find(
        l: *mut hl_field_lookup,
        size: ::std::os::raw::c_int,
        hash: ::std::os::raw::c_int,
    ) -> *mut hl_field_lookup;
}
extern "C" {
    pub fn hl_lookup_insert(
        l: *mut hl_field_lookup,
        size: ::std::os::raw::c_int,
        hash: ::std::os::raw::c_int,
        t: *mut hl_type,
        index: ::std::os::raw::c_int,
    ) -> *mut hl_field_lookup;
}
extern "C" {
    pub fn hl_dyn_geti(
        d: *mut vdynamic,
        hfield: ::std::os::raw::c_int,
        t: *mut hl_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_dyn_getp(
        d: *mut vdynamic,
        hfield: ::std::os::raw::c_int,
        t: *mut hl_type,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_dyn_getf(d: *mut vdynamic, hfield: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn hl_dyn_getd(d: *mut vdynamic, hfield: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn hl_dyn_casti(
        data: *mut ::std::os::raw::c_void,
        t: *mut hl_type,
        to: *mut hl_type,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_dyn_castp(
        data: *mut ::std::os::raw::c_void,
        t: *mut hl_type,
        to: *mut hl_type,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_dyn_castf(data: *mut ::std::os::raw::c_void, t: *mut hl_type) -> f32;
}
extern "C" {
    pub fn hl_dyn_castd(data: *mut ::std::os::raw::c_void, t: *mut hl_type) -> f64;
}
extern "C" {
    pub fn hl_dyn_compare(a: *mut vdynamic, b: *mut vdynamic) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_make_dyn(data: *mut ::std::os::raw::c_void, t: *mut hl_type) -> *mut vdynamic;
}
extern "C" {
    pub fn hl_write_dyn(
        data: *mut ::std::os::raw::c_void,
        t: *mut hl_type,
        v: *mut vdynamic,
        is_tmp: bool_,
    );
}
extern "C" {
    pub fn hl_dyn_seti(
        d: *mut vdynamic,
        hfield: ::std::os::raw::c_int,
        t: *mut hl_type,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn hl_dyn_setp(
        d: *mut vdynamic,
        hfield: ::std::os::raw::c_int,
        t: *mut hl_type,
        ptr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn hl_dyn_setf(d: *mut vdynamic, hfield: ::std::os::raw::c_int, f: f32);
}
extern "C" {
    pub fn hl_dyn_setd(d: *mut vdynamic, hfield: ::std::os::raw::c_int, v: f64);
}
pub const DynOp_OpAdd: DynOp = 0;
pub const DynOp_OpSub: DynOp = 1;
pub const DynOp_OpMul: DynOp = 2;
pub const DynOp_OpMod: DynOp = 3;
pub const DynOp_OpDiv: DynOp = 4;
pub const DynOp_OpShl: DynOp = 5;
pub const DynOp_OpShr: DynOp = 6;
pub const DynOp_OpUShr: DynOp = 7;
pub const DynOp_OpAnd: DynOp = 8;
pub const DynOp_OpOr: DynOp = 9;
pub const DynOp_OpXor: DynOp = 10;
pub const DynOp_OpLast: DynOp = 11;
pub type DynOp = u32;
extern "C" {
    pub fn hl_dyn_op(
        op: ::std::os::raw::c_int,
        a: *mut vdynamic,
        b: *mut vdynamic,
    ) -> *mut vdynamic;
}
extern "C" {
    pub fn hl_alloc_closure_void(
        t: *mut hl_type,
        fvalue: *mut ::std::os::raw::c_void,
    ) -> *mut vclosure;
}
extern "C" {
    pub fn hl_alloc_closure_ptr(
        fullt: *mut hl_type,
        fvalue: *mut ::std::os::raw::c_void,
        ptr: *mut ::std::os::raw::c_void,
    ) -> *mut vclosure;
}
extern "C" {
    pub fn hl_make_fun_wrapper(c: *mut vclosure, to: *mut hl_type) -> *mut vclosure;
}
extern "C" {
    pub fn hl_wrapper_call(
        value: *mut ::std::os::raw::c_void,
        args: *mut *mut ::std::os::raw::c_void,
        ret: *mut vdynamic,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_dyn_call_obj(
        obj: *mut vdynamic,
        ft: *mut hl_type,
        hfield: ::std::os::raw::c_int,
        args: *mut *mut ::std::os::raw::c_void,
        ret: *mut vdynamic,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_dyn_call(
        c: *mut vclosure,
        args: *mut *mut vdynamic,
        nargs: ::std::os::raw::c_int,
    ) -> *mut vdynamic;
}
extern "C" {
    pub fn hl_dyn_call_safe(
        c: *mut vclosure,
        args: *mut *mut vdynamic,
        nargs: ::std::os::raw::c_int,
        isException: *mut bool_,
    ) -> *mut vdynamic;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _hl_thread {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _hl_mutex {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _hl_tls {
    _unused: [u8; 0],
}
pub type hl_thread = _hl_thread;
pub type hl_mutex = _hl_mutex;
pub type hl_tls = _hl_tls;
extern "C" {
    pub fn hl_thread_start(
        callback: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_void,
        withGC: bool_,
    ) -> *mut hl_thread;
}
extern "C" {
    pub fn hl_thread_current() -> *mut hl_thread;
}
extern "C" {
    pub fn hl_thread_yield();
}
extern "C" {
    pub fn hl_register_thread(stack_top: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn hl_unregister_thread();
}
extern "C" {
    pub fn hl_mutex_alloc(gc_thread: bool_) -> *mut hl_mutex;
}
extern "C" {
    pub fn hl_mutex_acquire(l: *mut hl_mutex);
}
extern "C" {
    pub fn hl_mutex_try_acquire(l: *mut hl_mutex) -> bool_;
}
extern "C" {
    pub fn hl_mutex_release(l: *mut hl_mutex);
}
extern "C" {
    pub fn hl_mutex_free(l: *mut hl_mutex);
}
extern "C" {
    pub fn hl_tls_alloc(gc_value: bool_) -> *mut hl_tls;
}
extern "C" {
    pub fn hl_tls_set(l: *mut hl_tls, value: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn hl_tls_get(l: *mut hl_tls) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_tls_free(l: *mut hl_tls);
}
extern "C" {
    pub fn hl_gc_alloc_gen(
        t: *mut hl_type,
        size: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_add_root(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn hl_remove_root(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn hl_gc_major();
}
extern "C" {
    pub fn hl_is_gc_ptr(ptr: *mut ::std::os::raw::c_void) -> bool_;
}
extern "C" {
    pub fn hl_blocking(b: bool_);
}
extern "C" {
    pub fn hl_is_blocking() -> bool_;
}
pub type hl_types_dump = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_int),
        >,
    ),
>;
extern "C" {
    pub fn hl_gc_set_dump_types(tdump: hl_types_dump);
}
extern "C" {
    pub fn hl_alloc_init(a: *mut hl_alloc);
}
extern "C" {
    pub fn hl_malloc(a: *mut hl_alloc, size: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_zalloc(a: *mut hl_alloc, size: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_free(a: *mut hl_alloc);
}
extern "C" {
    pub fn hl_global_init();
}
extern "C" {
    pub fn hl_global_free();
}
extern "C" {
    pub fn hl_alloc_executable_memory(size: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_free_executable_memory(ptr: *mut ::std::os::raw::c_void, size: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_buffer {
    _unused: [u8; 0],
}
extern "C" {
    pub fn hl_alloc_buffer() -> *mut hl_buffer;
}
extern "C" {
    pub fn hl_buffer_val(b: *mut hl_buffer, v: *mut vdynamic);
}
extern "C" {
    pub fn hl_buffer_char(b: *mut hl_buffer, c: uchar);
}
extern "C" {
    pub fn hl_buffer_str(b: *mut hl_buffer, str: *const uchar);
}
extern "C" {
    pub fn hl_buffer_cstr(b: *mut hl_buffer, str: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn hl_buffer_str_sub(b: *mut hl_buffer, str: *const uchar, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hl_buffer_length(b: *mut hl_buffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_buffer_content(b: *mut hl_buffer, len: *mut ::std::os::raw::c_int) -> *mut uchar;
}
extern "C" {
    pub fn hl_to_string(v: *mut vdynamic) -> *mut uchar;
}
extern "C" {
    pub fn hl_type_str(t: *mut hl_type) -> *const uchar;
}
extern "C" {
    pub fn hl_throw_buffer(b: *mut hl_buffer);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vstring {
    pub t: *mut hl_type,
    pub bytes: *mut uchar,
    pub length: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_vstring() {
    assert_eq!(
        ::std::mem::size_of::<vstring>(),
        24usize,
        concat!("Size of: ", stringify!(vstring))
    );
    assert_eq!(
        ::std::mem::align_of::<vstring>(),
        8usize,
        concat!("Alignment of ", stringify!(vstring))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vstring>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vstring),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vstring>())).bytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(vstring),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vstring>())).length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(vstring),
            "::",
            stringify!(length)
        )
    );
}
extern "C" {
    pub fn hl_fatal_error(
        msg: *const ::std::os::raw::c_char,
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_fatal_fmt(
        file: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn hl_sys_init(
        args: *mut *mut ::std::os::raw::c_void,
        nargs: ::std::os::raw::c_int,
        hlfile: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn hl_setup_callbacks(sc: *mut ::std::os::raw::c_void, gw: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn hl_setup_callbacks2(
        sc: *mut ::std::os::raw::c_void,
        gw: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn hl_setup_reload_check(
        freload: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_void,
    );
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    assert_eq!(
        ::std::mem::size_of::<__jmp_buf_tag>(),
        200usize,
        concat!("Size of: ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__jmpbuf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__jmpbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__mask_was_saved as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__saved_mask as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__saved_mask)
        )
    );
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn siglongjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
pub type hl_trap_ctx = _hl_trap_ctx;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _hl_trap_ctx {
    pub buf: jmp_buf,
    pub prev: *mut hl_trap_ctx,
    pub tcheck: *mut vdynamic,
}
#[test]
fn bindgen_test_layout__hl_trap_ctx() {
    assert_eq!(
        ::std::mem::size_of::<_hl_trap_ctx>(),
        216usize,
        concat!("Size of: ", stringify!(_hl_trap_ctx))
    );
    assert_eq!(
        ::std::mem::align_of::<_hl_trap_ctx>(),
        8usize,
        concat!("Alignment of ", stringify!(_hl_trap_ctx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hl_trap_ctx>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_hl_trap_ctx),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hl_trap_ctx>())).prev as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_hl_trap_ctx),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_hl_trap_ctx>())).tcheck as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_hl_trap_ctx),
            "::",
            stringify!(tcheck)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hl_thread_info {
    pub thread_id: ::std::os::raw::c_int,
    pub gc_blocking: ::std::os::raw::c_int,
    pub stack_top: *mut ::std::os::raw::c_void,
    pub stack_cur: *mut ::std::os::raw::c_void,
    pub trap_current: *mut hl_trap_ctx,
    pub trap_uncaught: *mut hl_trap_ctx,
    pub exc_handler: *mut vclosure,
    pub exc_value: *mut vdynamic,
    pub flags: ::std::os::raw::c_int,
    pub exc_stack_count: ::std::os::raw::c_int,
    pub gc_regs: jmp_buf,
    pub exc_stack_trace: [*mut ::std::os::raw::c_void; 256usize],
    pub extra_stack_data: [*mut ::std::os::raw::c_void; 64usize],
    pub extra_stack_size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hl_thread_info() {
    assert_eq!(
        ::std::mem::size_of::<hl_thread_info>(),
        2832usize,
        concat!("Size of: ", stringify!(hl_thread_info))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_thread_info>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_thread_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).thread_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(thread_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).gc_blocking as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(gc_blocking)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).stack_top as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(stack_top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).stack_cur as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(stack_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).trap_current as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(trap_current)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).trap_uncaught as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(trap_uncaught)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).exc_handler as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(exc_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).exc_value as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(exc_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).exc_stack_count as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(exc_stack_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).gc_regs as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(gc_regs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).exc_stack_trace as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(exc_stack_trace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).extra_stack_data as *const _ as usize },
        2312usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(extra_stack_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_thread_info>())).extra_stack_size as *const _ as usize },
        2824usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_thread_info),
            "::",
            stringify!(extra_stack_size)
        )
    );
}
extern "C" {
    pub fn hl_get_thread() -> *mut hl_thread_info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_track_info {
    pub flags: ::std::os::raw::c_int,
    pub on_alloc: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut hl_type,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut ::std::os::raw::c_void,
        ),
    >,
    pub on_cast:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut hl_type, arg2: *mut hl_type)>,
    pub on_dynfield: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut vdynamic, arg2: ::std::os::raw::c_int),
    >,
    pub on_dyncall: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut vdynamic, arg2: ::std::os::raw::c_int),
    >,
}
#[test]
fn bindgen_test_layout_hl_track_info() {
    assert_eq!(
        ::std::mem::size_of::<hl_track_info>(),
        40usize,
        concat!("Size of: ", stringify!(hl_track_info))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_track_info>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_track_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_track_info>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_track_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_track_info>())).on_alloc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_track_info),
            "::",
            stringify!(on_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_track_info>())).on_cast as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_track_info),
            "::",
            stringify!(on_cast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_track_info>())).on_dynfield as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_track_info),
            "::",
            stringify!(on_dynfield)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_track_info>())).on_dyncall as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_track_info),
            "::",
            stringify!(on_dyncall)
        )
    );
}
extern "C" {
    pub static mut hl_track: hl_track_info;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn sincos(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
}
extern "C" {
    pub fn __sincos(__x: f64, __sinx: *mut f64, __cosx: *mut f64);
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn exp10(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp10(__x: f64) -> f64;
}
extern "C" {
    pub fn pow10(__x: f64) -> f64;
}
extern "C" {
    pub fn __pow10(__x: f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn sincosf(__x: f32, __sinx: *mut f32, __cosx: *mut f32);
}
extern "C" {
    pub fn __sincosf(__x: f32, __sinx: *mut f32, __cosx: *mut f32);
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn exp10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp10f(__x: f32) -> f32;
}
extern "C" {
    pub fn pow10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __pow10f(__x: f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn sincosl(__x: u128, __sinx: *mut u128, __cosx: *mut u128);
}
extern "C" {
    pub fn __sincosl(__x: u128, __sinx: *mut u128, __cosx: *mut u128);
}
extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn expl(__x: u128) -> u128;
}
extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
extern "C" {
    pub fn frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn logl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn exp10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp10l(__x: u128) -> u128;
}
extern "C" {
    pub fn pow10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __pow10l(__x: u128) -> u128;
}
extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __lgammal_r(arg1: u128, __signgamp: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn __scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub fn __scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: _bindgen_ty_1 = 0;
pub const FP_INFINITE: _bindgen_ty_1 = 1;
pub const FP_ZERO: _bindgen_ty_1 = 2;
pub const FP_SUBNORMAL: _bindgen_ty_1 = 3;
pub const FP_NORMAL: _bindgen_ty_1 = 4;
pub type _bindgen_ty_1 = u32;
pub const _LIB_VERSION_TYPE__IEEE_: _LIB_VERSION_TYPE = -1;
pub const _LIB_VERSION_TYPE__SVID_: _LIB_VERSION_TYPE = 0;
pub const _LIB_VERSION_TYPE__XOPEN_: _LIB_VERSION_TYPE = 1;
pub const _LIB_VERSION_TYPE__POSIX_: _LIB_VERSION_TYPE = 2;
pub const _LIB_VERSION_TYPE__ISOC_: _LIB_VERSION_TYPE = 3;
pub type _LIB_VERSION_TYPE = i32;
extern "C" {
    pub static mut _LIB_VERSION: _LIB_VERSION_TYPE;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout_exception() {
    assert_eq!(
        ::std::mem::size_of::<exception>(),
        40usize,
        concat!("Size of: ", stringify!(exception))
    );
    assert_eq!(
        ::std::mem::align_of::<exception>(),
        8usize,
        concat!("Alignment of ", stringify!(exception))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).arg1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).arg2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).retval as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(retval)
        )
    );
}
extern "C" {
    pub fn matherr(__exc: *mut exception) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hlc_static_call(
        fun: *mut ::std::os::raw::c_void,
        t: *mut hl_type,
        args: *mut *mut ::std::os::raw::c_void,
        out: *mut vdynamic,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hlc_get_wrapper(t: *mut hl_type) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_entry_point();
}
pub const hl_op_OMov: hl_op = 0;
pub const hl_op_OInt: hl_op = 1;
pub const hl_op_OFloat: hl_op = 2;
pub const hl_op_OBool: hl_op = 3;
pub const hl_op_OBytes: hl_op = 4;
pub const hl_op_OString: hl_op = 5;
pub const hl_op_ONull: hl_op = 6;
pub const hl_op_OAdd: hl_op = 7;
pub const hl_op_OSub: hl_op = 8;
pub const hl_op_OMul: hl_op = 9;
pub const hl_op_OSDiv: hl_op = 10;
pub const hl_op_OUDiv: hl_op = 11;
pub const hl_op_OSMod: hl_op = 12;
pub const hl_op_OUMod: hl_op = 13;
pub const hl_op_OShl: hl_op = 14;
pub const hl_op_OSShr: hl_op = 15;
pub const hl_op_OUShr: hl_op = 16;
pub const hl_op_OAnd: hl_op = 17;
pub const hl_op_OOr: hl_op = 18;
pub const hl_op_OXor: hl_op = 19;
pub const hl_op_ONeg: hl_op = 20;
pub const hl_op_ONot: hl_op = 21;
pub const hl_op_OIncr: hl_op = 22;
pub const hl_op_ODecr: hl_op = 23;
pub const hl_op_OCall0: hl_op = 24;
pub const hl_op_OCall1: hl_op = 25;
pub const hl_op_OCall2: hl_op = 26;
pub const hl_op_OCall3: hl_op = 27;
pub const hl_op_OCall4: hl_op = 28;
pub const hl_op_OCallN: hl_op = 29;
pub const hl_op_OCallMethod: hl_op = 30;
pub const hl_op_OCallThis: hl_op = 31;
pub const hl_op_OCallClosure: hl_op = 32;
pub const hl_op_OStaticClosure: hl_op = 33;
pub const hl_op_OInstanceClosure: hl_op = 34;
pub const hl_op_OVirtualClosure: hl_op = 35;
pub const hl_op_OGetGlobal: hl_op = 36;
pub const hl_op_OSetGlobal: hl_op = 37;
pub const hl_op_OField: hl_op = 38;
pub const hl_op_OSetField: hl_op = 39;
pub const hl_op_OGetThis: hl_op = 40;
pub const hl_op_OSetThis: hl_op = 41;
pub const hl_op_ODynGet: hl_op = 42;
pub const hl_op_ODynSet: hl_op = 43;
pub const hl_op_OJTrue: hl_op = 44;
pub const hl_op_OJFalse: hl_op = 45;
pub const hl_op_OJNull: hl_op = 46;
pub const hl_op_OJNotNull: hl_op = 47;
pub const hl_op_OJSLt: hl_op = 48;
pub const hl_op_OJSGte: hl_op = 49;
pub const hl_op_OJSGt: hl_op = 50;
pub const hl_op_OJSLte: hl_op = 51;
pub const hl_op_OJULt: hl_op = 52;
pub const hl_op_OJUGte: hl_op = 53;
pub const hl_op_OJNotLt: hl_op = 54;
pub const hl_op_OJNotGte: hl_op = 55;
pub const hl_op_OJEq: hl_op = 56;
pub const hl_op_OJNotEq: hl_op = 57;
pub const hl_op_OJAlways: hl_op = 58;
pub const hl_op_OToDyn: hl_op = 59;
pub const hl_op_OToSFloat: hl_op = 60;
pub const hl_op_OToUFloat: hl_op = 61;
pub const hl_op_OToInt: hl_op = 62;
pub const hl_op_OSafeCast: hl_op = 63;
pub const hl_op_OUnsafeCast: hl_op = 64;
pub const hl_op_OToVirtual: hl_op = 65;
pub const hl_op_OLabel: hl_op = 66;
pub const hl_op_ORet: hl_op = 67;
pub const hl_op_OThrow: hl_op = 68;
pub const hl_op_ORethrow: hl_op = 69;
pub const hl_op_OSwitch: hl_op = 70;
pub const hl_op_ONullCheck: hl_op = 71;
pub const hl_op_OTrap: hl_op = 72;
pub const hl_op_OEndTrap: hl_op = 73;
pub const hl_op_OGetI8: hl_op = 74;
pub const hl_op_OGetI16: hl_op = 75;
pub const hl_op_OGetMem: hl_op = 76;
pub const hl_op_OGetArray: hl_op = 77;
pub const hl_op_OSetI8: hl_op = 78;
pub const hl_op_OSetI16: hl_op = 79;
pub const hl_op_OSetMem: hl_op = 80;
pub const hl_op_OSetArray: hl_op = 81;
pub const hl_op_ONew: hl_op = 82;
pub const hl_op_OArraySize: hl_op = 83;
pub const hl_op_OType: hl_op = 84;
pub const hl_op_OGetType: hl_op = 85;
pub const hl_op_OGetTID: hl_op = 86;
pub const hl_op_ORef: hl_op = 87;
pub const hl_op_OUnref: hl_op = 88;
pub const hl_op_OSetref: hl_op = 89;
pub const hl_op_OMakeEnum: hl_op = 90;
pub const hl_op_OEnumAlloc: hl_op = 91;
pub const hl_op_OEnumIndex: hl_op = 92;
pub const hl_op_OEnumField: hl_op = 93;
pub const hl_op_OSetEnumField: hl_op = 94;
pub const hl_op_OAssert: hl_op = 95;
pub const hl_op_ORefData: hl_op = 96;
pub const hl_op_ORefOffset: hl_op = 97;
pub const hl_op_ONop: hl_op = 98;
pub const hl_op_OLast: hl_op = 99;
pub type hl_op = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_native {
    pub lib: *const ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub t: *mut hl_type,
    pub findex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hl_native() {
    assert_eq!(
        ::std::mem::size_of::<hl_native>(),
        32usize,
        concat!("Size of: ", stringify!(hl_native))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_native>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_native))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_native>())).lib as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_native),
            "::",
            stringify!(lib)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_native>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_native),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_native>())).t as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_native),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_native>())).findex as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_native),
            "::",
            stringify!(findex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_opcode {
    pub op: hl_op,
    pub p1: ::std::os::raw::c_int,
    pub p2: ::std::os::raw::c_int,
    pub p3: ::std::os::raw::c_int,
    pub extra: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hl_opcode() {
    assert_eq!(
        ::std::mem::size_of::<hl_opcode>(),
        24usize,
        concat!("Size of: ", stringify!(hl_opcode))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_opcode>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_opcode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_opcode>())).op as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_opcode),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_opcode>())).p1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_opcode),
            "::",
            stringify!(p1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_opcode>())).p2 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_opcode),
            "::",
            stringify!(p2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_opcode>())).p3 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_opcode),
            "::",
            stringify!(p3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_opcode>())).extra as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_opcode),
            "::",
            stringify!(extra)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hl_function {
    pub findex: ::std::os::raw::c_int,
    pub nregs: ::std::os::raw::c_int,
    pub nops: ::std::os::raw::c_int,
    pub ref_: ::std::os::raw::c_int,
    pub type_: *mut hl_type,
    pub regs: *mut *mut hl_type,
    pub ops: *mut hl_opcode,
    pub debug: *mut ::std::os::raw::c_int,
    pub obj: *mut hl_type_obj,
    pub field: hl_function__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hl_function__bindgen_ty_1 {
    pub name: *const uchar,
    pub ref_: *mut hl_function,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_hl_function__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<hl_function__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(hl_function__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_function__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_function__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function__bindgen_ty_1>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function__bindgen_ty_1>())).ref_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function__bindgen_ty_1),
            "::",
            stringify!(ref_)
        )
    );
}
#[test]
fn bindgen_test_layout_hl_function() {
    assert_eq!(
        ::std::mem::size_of::<hl_function>(),
        64usize,
        concat!("Size of: ", stringify!(hl_function))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_function>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_function))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function>())).findex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function),
            "::",
            stringify!(findex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function>())).nregs as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function),
            "::",
            stringify!(nregs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function>())).nops as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function),
            "::",
            stringify!(nops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function>())).ref_ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function),
            "::",
            stringify!(ref_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function>())).regs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function),
            "::",
            stringify!(regs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function>())).ops as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function),
            "::",
            stringify!(ops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function>())).debug as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function),
            "::",
            stringify!(debug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function>())).obj as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_function>())).field as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_function),
            "::",
            stringify!(field)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_constant {
    pub global: ::std::os::raw::c_int,
    pub nfields: ::std::os::raw::c_int,
    pub fields: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hl_constant() {
    assert_eq!(
        ::std::mem::size_of::<hl_constant>(),
        16usize,
        concat!("Size of: ", stringify!(hl_constant))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_constant>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_constant))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_constant>())).global as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_constant),
            "::",
            stringify!(global)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_constant>())).nfields as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_constant),
            "::",
            stringify!(nfields)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_constant>())).fields as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_constant),
            "::",
            stringify!(fields)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_code {
    pub version: ::std::os::raw::c_int,
    pub nints: ::std::os::raw::c_int,
    pub nfloats: ::std::os::raw::c_int,
    pub nstrings: ::std::os::raw::c_int,
    pub nbytes: ::std::os::raw::c_int,
    pub ntypes: ::std::os::raw::c_int,
    pub nglobals: ::std::os::raw::c_int,
    pub nnatives: ::std::os::raw::c_int,
    pub nfunctions: ::std::os::raw::c_int,
    pub nconstants: ::std::os::raw::c_int,
    pub entrypoint: ::std::os::raw::c_int,
    pub ndebugfiles: ::std::os::raw::c_int,
    pub hasdebug: bool_,
    pub ints: *mut ::std::os::raw::c_int,
    pub floats: *mut f64,
    pub strings: *mut *mut ::std::os::raw::c_char,
    pub strings_lens: *mut ::std::os::raw::c_int,
    pub bytes: *mut ::std::os::raw::c_char,
    pub bytes_pos: *mut ::std::os::raw::c_int,
    pub debugfiles: *mut *mut ::std::os::raw::c_char,
    pub debugfiles_lens: *mut ::std::os::raw::c_int,
    pub ustrings: *mut *mut uchar,
    pub types: *mut hl_type,
    pub globals: *mut *mut hl_type,
    pub natives: *mut hl_native,
    pub functions: *mut hl_function,
    pub constants: *mut hl_constant,
    pub alloc: hl_alloc,
    pub falloc: hl_alloc,
}
#[test]
fn bindgen_test_layout_hl_code() {
    assert_eq!(
        ::std::mem::size_of::<hl_code>(),
        184usize,
        concat!("Size of: ", stringify!(hl_code))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_code>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_code))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).nints as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(nints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).nfloats as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(nfloats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).nstrings as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(nstrings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).nbytes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(nbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).ntypes as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(ntypes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).nglobals as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(nglobals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).nnatives as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(nnatives)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).nfunctions as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(nfunctions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).nconstants as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(nconstants)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).entrypoint as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(entrypoint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).ndebugfiles as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(ndebugfiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).hasdebug as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(hasdebug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).ints as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(ints)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).floats as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(floats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).strings as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(strings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).strings_lens as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(strings_lens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).bytes as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).bytes_pos as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(bytes_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).debugfiles as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(debugfiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).debugfiles_lens as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(debugfiles_lens)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).ustrings as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(ustrings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).types as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(types)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).globals as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(globals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).natives as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(natives)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).functions as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(functions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).constants as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(constants)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).alloc as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code>())).falloc as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code),
            "::",
            stringify!(falloc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_debug_infos {
    pub offsets: *mut ::std::os::raw::c_void,
    pub start: ::std::os::raw::c_int,
    pub large: bool_,
}
#[test]
fn bindgen_test_layout_hl_debug_infos() {
    assert_eq!(
        ::std::mem::size_of::<hl_debug_infos>(),
        16usize,
        concat!("Size of: ", stringify!(hl_debug_infos))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_debug_infos>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_debug_infos))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_debug_infos>())).offsets as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_debug_infos),
            "::",
            stringify!(offsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_debug_infos>())).start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_debug_infos),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_debug_infos>())).large as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_debug_infos),
            "::",
            stringify!(large)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jit_ctx {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_code_hash {
    pub code: *mut hl_code,
    pub types_hashes: *mut ::std::os::raw::c_int,
    pub globals_signs: *mut ::std::os::raw::c_int,
    pub functions_signs: *mut ::std::os::raw::c_int,
    pub functions_hashes: *mut ::std::os::raw::c_int,
    pub functions_indexes: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hl_code_hash() {
    assert_eq!(
        ::std::mem::size_of::<hl_code_hash>(),
        48usize,
        concat!("Size of: ", stringify!(hl_code_hash))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_code_hash>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_code_hash))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code_hash>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code_hash),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code_hash>())).types_hashes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code_hash),
            "::",
            stringify!(types_hashes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code_hash>())).globals_signs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code_hash),
            "::",
            stringify!(globals_signs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code_hash>())).functions_signs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code_hash),
            "::",
            stringify!(functions_signs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code_hash>())).functions_hashes as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code_hash),
            "::",
            stringify!(functions_hashes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_code_hash>())).functions_indexes as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_code_hash),
            "::",
            stringify!(functions_indexes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hl_module {
    pub code: *mut hl_code,
    pub codesize: ::std::os::raw::c_int,
    pub globals_size: ::std::os::raw::c_int,
    pub globals_indexes: *mut ::std::os::raw::c_int,
    pub globals_data: *mut ::std::os::raw::c_uchar,
    pub functions_ptrs: *mut *mut ::std::os::raw::c_void,
    pub functions_indexes: *mut ::std::os::raw::c_int,
    pub jit_code: *mut ::std::os::raw::c_void,
    pub hash: *mut hl_code_hash,
    pub jit_debug: *mut hl_debug_infos,
    pub jit_ctx: *mut jit_ctx,
    pub ctx: hl_module_context,
}
#[test]
fn bindgen_test_layout_hl_module() {
    assert_eq!(
        ::std::mem::size_of::<hl_module>(),
        104usize,
        concat!("Size of: ", stringify!(hl_module))
    );
    assert_eq!(
        ::std::mem::align_of::<hl_module>(),
        8usize,
        concat!("Alignment of ", stringify!(hl_module))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).codesize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(codesize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).globals_size as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(globals_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).globals_indexes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(globals_indexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).globals_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(globals_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).functions_ptrs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(functions_ptrs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).functions_indexes as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(functions_indexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).jit_code as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(jit_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).hash as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).jit_debug as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(jit_debug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).jit_ctx as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(jit_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hl_module>())).ctx as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(hl_module),
            "::",
            stringify!(ctx)
        )
    );
}
extern "C" {
    pub fn hl_code_read(
        data: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
        error_msg: *mut *mut ::std::os::raw::c_char,
    ) -> *mut hl_code;
}
extern "C" {
    pub fn hl_code_hash_alloc(c: *mut hl_code) -> *mut hl_code_hash;
}
extern "C" {
    pub fn hl_code_hash_finalize(h: *mut hl_code_hash);
}
extern "C" {
    pub fn hl_code_hash_free(h: *mut hl_code_hash);
}
extern "C" {
    pub fn hl_code_free(c: *mut hl_code);
}
extern "C" {
    pub fn hl_code_hash_type(h: *mut hl_code_hash, t: *mut hl_type) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_code_hash_remap_globals(hnew: *mut hl_code_hash, hold: *mut hl_code_hash);
}
extern "C" {
    pub fn hl_get_ustring(c: *mut hl_code, index: ::std::os::raw::c_int) -> *const uchar;
}
extern "C" {
    pub fn hl_op_name(op: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
pub type h_bool = ::std::os::raw::c_uchar;
extern "C" {
    pub fn hl_module_alloc(code: *mut hl_code) -> *mut hl_module;
}
extern "C" {
    pub fn hl_module_init(m: *mut hl_module, hot_reload: h_bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_module_patch(m: *mut hl_module, code: *mut hl_code) -> h_bool;
}
extern "C" {
    pub fn hl_module_free(m: *mut hl_module);
}
extern "C" {
    pub fn hl_module_debug(m: *mut hl_module, port: ::std::os::raw::c_int, wait: h_bool) -> h_bool;
}
extern "C" {
    pub fn hl_profile_setup(sample_count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn hl_profile_end();
}
extern "C" {
    pub fn hl_jit_alloc() -> *mut jit_ctx;
}
extern "C" {
    pub fn hl_jit_free(ctx: *mut jit_ctx, can_reset: h_bool);
}
extern "C" {
    pub fn hl_jit_reset(ctx: *mut jit_ctx, m: *mut hl_module);
}
extern "C" {
    pub fn hl_jit_init(ctx: *mut jit_ctx, m: *mut hl_module);
}
extern "C" {
    pub fn hl_jit_function(
        ctx: *mut jit_ctx,
        m: *mut hl_module,
        f: *mut hl_function,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hl_jit_code(
        ctx: *mut jit_ctx,
        m: *mut hl_module,
        codesize: *mut ::std::os::raw::c_int,
        debug: *mut *mut hl_debug_infos,
        previous: *mut hl_module,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn hl_jit_patch_method(
        old_fun: *mut ::std::os::raw::c_void,
        new_fun_table: *mut *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
